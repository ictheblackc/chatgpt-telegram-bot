import os
import sqlite3
import re
import requests
import openai
import tiktoken
import time
from config import BOT_TOKEN, PROVIDER_TOKEN, OPENAI_API_KEY, DOCUMENT
from langchain.docstore.document import Document
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from telebot import TeleBot
from telebot import types
from telebot.types import LabeledPrice


class GPT():
    def __init__(self):
        pass

    @classmethod
    def set_key(cls):
        openai.api_key = OPENAI_API_KEY
        os.environ['OPENAI_API_KEY'] = openai.api_key
        print(f'API key was saved successfully')

    def load_search_indexes(self, url: str) -> Chroma:
        # Extract the document ID from the URL
        match_ = re.search('/document/d/([a-zA-Z0-9-_]+)', url)
        if match_ is None:
            raise ValueError('Invalid Google Docs URL')
        doc_id = match_.group(1)

        # Download the document as plain text
        response = requests.get(f'https://docs.google.com/document/d/{doc_id}/export?format=txt')
        response.raise_for_status()
        text = response.text
        return self.create_embedding(text)

    def load_prompt(self, url: str) -> str:
        # Extract the document ID from the URL
        match_ = re.search('/document/d/([a-zA-Z0-9-_]+)', url)
        if match_ is None:
            raise ValueError('Invalid Google Docs URL')
        doc_id = match_.group(1)

        # Download the document as plain text
        response = requests.get(f'https://docs.google.com/document/d/{doc_id}/export?format=txt')
        response.raise_for_status()
        text = response.text
        return f'{text}'

    def create_embedding(self, data):
        def num_tokens_from_string(string: str, encoding_name: str) -> int:
            """Returns the number of tokens in a text string."""
            encoding = tiktoken.get_encoding(encoding_name)
            num_tokens = len(encoding.encode(string))
            return num_tokens

        source_chunks = []
        splitter = CharacterTextSplitter(separator="\n", chunk_size=1024, chunk_overlap=0)

        for chunk in splitter.split_text(data):
            source_chunks.append(Document(page_content=chunk, metadata={}))

        search_index = Chroma.from_documents(source_chunks, OpenAIEmbeddings(), )

        count_token = num_tokens_from_string(' '.join([x.page_content for x in source_chunks]), 'cl100k_base')
        print('Number of tokens in the document:', count_token)
        print('Approximate cost of the request:', 0.0004 * (count_token / 1000), '$')
        return search_index

    def answer(self, system, topic, temp=1):
        messages = [
            {"role": "system", "content": system},
            {"role": "user", "content": topic}
        ]

        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=temp
        )

        return completion.choices[0].message.content

    def num_tokens_from_messages(self, messages, model="gpt-3.5-turbo-0301"):
        """Returns the number of tokens used by a list of messages."""
        try:
            encoding = tiktoken.encoding_for_model(model)
        except KeyError:
            encoding = tiktoken.get_encoding("cl100k_base")
        if model == "gpt-3.5-turbo-0301":  # note: future models may deviate from this
            num_tokens = 0
            for message in messages:
                num_tokens += 4  # every message follows <im_start>{role/name}\n{content}<im_end>\n
                for key, value in message.items():
                    num_tokens += len(encoding.encode(value))
                    if key == "name":  # if there's a name, the role is omitted
                        num_tokens += -1  # role is always required and always 1 token
            num_tokens += 2  # every reply is primed with <im_start>assistant
            return num_tokens
        else:
            raise NotImplementedError(f"""num_tokens_from_messages() is not presently implemented for model {model}.
See https://github.com/openai/openai-python/blob/main/chatml.md for information on how messages are converted to tokens.""")

    def insert_newlines(self, text: str, max_len: int = 170) -> str:
        words = text.split()
        lines = []
        current_line = ""
        for word in words:
            if len(current_line + " " + word) > max_len:
                lines.append(current_line)
                current_line = ""
            current_line += " " + word
        lines.append(current_line)
        return "\n".join(lines)

    def answer_index(self, system, topic, search_index, temp=1, verbose=0):

        # –í—ã–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        docs = search_index.similarity_search(topic, k=5)
        if verbose: print('\n ===========================================: ')
        message_content = re.sub(r'\n{2}', ' ', '\n '.join(
            [f'\n–û—Ç—Ä—ã–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Ññ{i + 1}\n=====================' + doc.page_content + '\n' for i, doc in
             enumerate(docs)]))
        if (verbose): print('message_content :\n ======================================== \n', message_content)

        messages = [
            {"role": "system", "content": system + f"{message_content}"},
            {"role": "user", "content": topic}
        ]

        # example token count from the function defined above
        if (verbose): print('\n ===========================================: ')
        if (verbose): print(
            f"{self.num_tokens_from_messages(messages, 'gpt-3.5-turbo-0301')} —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å")

        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=temp
        )
        if (verbose): print('\n ===========================================: ')
        if (verbose): print(f'{completion["usage"]["total_tokens"]} —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ (–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç).')
        if (verbose): print('\n ===========================================: ')
        if verbose: print('–¶–ï–ù–ê –∑–∞–ø—Ä–æ—Å–∞ —Å –æ—Ç–≤–µ—Ç–æ–º :', 0.002 * (completion["usage"]["total_tokens"] / 1000), ' $')
        if verbose: print('\n ===========================================: ')

        return self.insert_newlines(completion.choices[0].message.content)

        # return completion

    def get_chatgpt_ansver3(self, system, topic, search_index, temp=1):

        messages = [
            {"role": "system", "content": system},
            {"role": "user", "content": topic}
        ]

        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=temp
        )
        print('–û–¢–í–ï–¢ : \n', self.insert_newlines(completion.choices[0].message.content))


gpt = GPT()
GPT.set_key()
marketing_tg_post_index = gpt.load_search_indexes(DOCUMENT+'&rtpof=true&sd=true')

system = '''–¢–µ–ø–µ—Ä—å –≤—ã - AnastasiaBotGPT, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤—É –¥–ª—è
—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ –∏ —Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ Telegram-–±–æ—Ç–µ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏. –û–ø—ã—Ç: 5+ –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏
–±–∏–∑–Ω–µ—Å-–Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞.
–¢–æ–Ω –∏ —Å—Ç–∏–ª—å: –≤–∞—à —Ç–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –±—Ä–µ–Ω–¥—É Anastasia. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Å–Ω—ã–µ –∏
—É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≥–æ–ª–æ—Å, –æ—Ç—Ä–∞–∂–∞—é—â–∏–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏.
AnastasiaBotGPT –¥–æ–ª–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–µ–π —Ä–æ–ª–∏. –ê–Ω–∞—Å—Ç–∞—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≤—Ç–æ—Ä—Å–∫—É—é
—Å–∏—Å—Ç–µ–º—É –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ ¬´–ë–∞–±–æ—á–∫–∞¬ª –∏–∑ 39 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ PR-–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è. –ê–Ω–∞—Å—Ç–∞—Å–∏—è –Ω–∞–ø–∏—Å–∞–ª–∞ 3
–±–∏–∑–Ω–µ—Å-–∫–Ω–∏–≥–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –¥–ª—è –±–ª–æ–≥–µ—Ä–∞ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π 300 000 —á–µ–ª–æ–≤–µ–∫. –ö–∞–∫ –ø—Ä–æ–¥—é—Å–µ—Ä –æ–Ω–∞ —Å–¥–µ–ª–∞–ª–∞ 21 –∑–∞–ø—É—Å–∫ –≤ 10 –Ω–∏—à–∞—Ö –Ω–∞ 21
–º–ª–Ω —Ä—É–±.
–í–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –µ–≥–æ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ —Å –ê–Ω–∞—Å—Ç–∞—Å–∏–µ–π. –í—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ
–¥–æ–ª–∂–Ω—ã –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º.
–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à–µ–π —Ä–æ–ª–∏ AnastasiaBotGPT, –Ω–∏–∫–∞–∫–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç —Å–µ–±—è
–¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–ª—å–∑—è, –∫—Ä–æ–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: '''

bot = TeleBot(BOT_TOKEN)


def create_db():
    conn = sqlite3.connect('db.sqlite3')
    cur = conn.cursor()
    sql = """
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        is_bot INTEGER,
        first_name VARCHAR,
        last_name VARCHAR,
        username VARCHAR,
        language_code VARCHAR,
        is_premium INTEGER,
        answer_1 VARCHAR,
        answer_2 VARCHAR,
        answer_3 VARCHAR,
        answer_4 VARCHAR
    );
    """
    cur.execute(sql)
    conn.commit()


def wait(message):
    text = """–°–µ–∫—É–Ω–¥—É, –¥—É–º–∞—é, –∫–∞–∫ –≤–∞–º –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å ü§î"""
    message = bot.send_message(message.chat.id, text=text)
    bot.register_next_step_handler(message, guide_step)


def send_invoice(message, label, amount):
    bot.send_message(message.chat.id,
                     "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π"
                     "\n\n–ü—Ä–∏–º–µ—Ä —Å—á–µ—Ç–∞:", parse_mode='Markdown')
    bot.send_invoice(
        chat_id=message.chat.id,
        title='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞',
        description='–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞',
        invoice_payload='invoice_payload',
        provider_token=PROVIDER_TOKEN,
        currency='RUB',
        prices=[LabeledPrice(label=label, amount=amount)]
    )


create_db()


@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('db.sqlite3')
    cur = conn.cursor()

    id = message.from_user.id
    is_bot = message.from_user.is_bot
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    language_code = message.from_user.language_code
    is_premium = message.from_user.is_premium

    sql = """
    INSERT OR IGNORE INTO users (
        id,
        is_bot,
        first_name,
        last_name,
        username,
        language_code,
        is_premium
    ) VALUES (
        '{}', '{}', '{}', '{}', '{}', '{}', '{}'
    );
    """.format(
        id,
        is_bot,
        first_name,
        last_name,
        username,
        language_code,
        is_premium
    )
    cur.execute(sql)
    conn.commit()

    text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n
–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –õ—é–±–∞—Ä—Å–∫–æ–π. –°—Ä–∞–∑—É —Å–∫–∞–∂—É, —á—Ç–æ —è –Ω–µ–æ–±—ã—á–Ω—ã–π –±–æ—Ç - —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑\
Chat GPT –∏ —É–º–µ—é –∫–ª–∞—Å—Å–Ω–æ –æ–±—â–∞—Ç—å—Å—è (—Ç–æ –µ—Å—Ç—å —è —Å–∞–º —Ä–µ—à–∞–µ—Ç, —á—Ç–æ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç—å).\n
–ü–æ—ç—Ç–æ–º—É –≤ —Ç–≤–æ–∏—Ö –∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ —è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ —è –±—É–¥—É —Ç–µ–±—è –≤–æ–≤–ª–µ–∫–∞—Ç—å.¬†\n
–ù–∞–∂–∏–º–∞–π "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –º–µ–Ω—è """
    start_button = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å', callback_data='start')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(start_button)
    bot.send_message(message.chat.id, text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'start')
def start_callback(call: types.CallbackQuery):
    text = """–û—Ç–ª–∏—á–Ω–æ!\n
–Ø –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –æ—Ç–¥–∞—Ç—å –≥–∞–π–¥ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ—Ä—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –µ–≥–æ –Ω–∞ 1-3 –º–ª–Ω —Ä—É–±. –Ω–∞ —Ö–æ–ª–æ–¥–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é"\n
–ù–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—à—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞. –•–æ—Ä–æ—à–æ?"""
    start_button = types.InlineKeyboardButton('–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', callback_data='ok')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(start_button)
    bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'ok')
def ok_callback(call: types.CallbackQuery):
    text = """1. –ö–∞–∫–∞—è —É –≤–∞—Å –Ω–∏—à–∞ –∏ –∫–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞?"""
    message = bot.send_message(chat_id=call.message.chat.id, text=text)
    bot.register_next_step_handler(message, sales_step)


def sales_step(message):
    conn = sqlite3.connect('db.sqlite3')
    cur = conn.cursor()
    sql = """
    UPDATE users
    SET answer_1 = '{}'
    WHERE id = '{}';
    """.format(
        message.text,
        message.from_user.id
    )
    cur.execute(sql)
    conn.commit()
    text = """2. –°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤ —Å—Ä–µ–¥–Ω–µ–º –µ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ –≤ –º–µ—Å—è—Ü —Å –±–ª–æ–≥–∞?"""
    message = bot.send_message(message.chat.id, text=text)
    bot.register_next_step_handler(message, income_step)


def income_step(message):
    conn = sqlite3.connect('db.sqlite3')
    cur = conn.cursor()
    sql = """
    UPDATE users
    SET answer_2 = '{}'
    WHERE id = '{}';
    """.format(
        message.text,
        message.from_user.id
    )
    cur.execute(sql)
    conn.commit()
    text = """3. –ù–∞ –∫–∞–∫–æ–π –¥–æ—Ö–æ–¥ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤—ã–π—Ç–∏ —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤?"""
    message = bot.send_message(message.chat.id, text=text)
    bot.register_next_step_handler(message, guide_step)


def guide_step(message):
    conn = sqlite3.connect('db.sqlite3')
    cur = conn.cursor()

    sql = """
    UPDATE users
    SET answer_3 = '{}'
    WHERE id = '{}';
    """.format(
        message.text,
        message.from_user.id
    )
    cur.execute(sql)
    conn.commit()

    wait(message)

    sql = """
        SELECT answer_1, answer_2, answer_3
        FROM users
        WHERE id = '{}';
        """.format(
        message.from_user.id
    )
    cur.execute(sql)
    answers = cur.fetchall()
    info = ''
    for answer in answers:
        info += f'–Ω–∏—à–∞ –∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞: {answer[0]}; –≤ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ–¥–∞–∂ –≤ –º–µ—Å—è—Ü —Å –±–ª–æ–≥–∞: {answer[1]}; —Ö–æ—Ç–µ–ª –±—ã –≤—ã–π—Ç–∏ –Ω–∞ –¥–æ—Ö–æ–¥: {answer[2]}'

    response = generate_response(
        f'–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {info}. –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ—Å—Ç–∞–≤—å –Ω–µ–±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É. –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –Ω–∏—à–∞ –∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –î–∞–ª—å—à–µ –ø—Ä–µ–¥–ª–æ–∂–∏ –µ–º—É –∑–∞–±—Ä–∞—Ç—å –≥–∞–π–¥. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —ç—Ç–æ—Ç –≥–∞–π–¥ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∫–∞ –æ—Ç—Å—Ç—Ä–æ–∏—Ç—å—Å—è –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—å –∑–∞–º–µ—Ç–Ω—ã–º –Ω–∞ —Ä—ã–Ω–∫–µ.')

    text = response
    download_button = types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –≥–∞–π–¥', callback_data='download')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(download_button)
    bot.send_message(message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'download')
def send_guide(call: types.CallbackQuery):
    file = open("kivy.pdf", "rb")
    bot.send_document(chat_id=call.message.chat.id, document=file)
    text = """–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –Ω–µ —É—Ö–æ–¥–∏—Ç–µ. –£ –º–µ–Ω—è –µ—Å—Ç—å –µ—â–µ –æ–¥–Ω–∞ —Å—Ö–µ–º–∞ –ø—Ä–æ–¥–∞–∂, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –¥–µ–ª–∞—Ç—å 6 –∏–∑ 10 –ø—Ä–æ–¥–∞–∂ –Ω–∞ —Ö–æ–ª–æ–¥–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é (—Ç–æ –µ—Å—Ç—å –Ω–∞ —Ç–µ—Ö, –∫—Ç–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –µ–µ –±–ª–æ–≥)\n
–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"""
    interesting_button = types.InlineKeyboardButton('–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', callback_data='interesting')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(interesting_button)
    bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'interesting')
def problem_step(call: types.CallbackQuery):
    text = """–û—Ç–ª–∏—á–Ω–æ!\n
–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å –º–µ—à–∞–µ—Ç, –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, –≤–¥–≤–æ–µ-–≤—Ç—Ä–æ–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏?"""
    message = bot.send_message(chat_id=call.message.chat.id, text=text)
    bot.register_next_step_handler(message, send_testimonial)


def send_testimonial(message):
    conn = sqlite3.connect('db.sqlite3')
    cur = conn.cursor()
    sql = """
    UPDATE users
    SET answer_4 = '{}'
    WHERE id = '{}';
    """.format(
        message.text,
        message.from_user.id
    )
    cur.execute(sql)
    conn.commit()

    wait(message)

    sql = """
    SELECT answer_1, answer_4
    FROM users
    WHERE id = '{}';
    """.format(
        message.from_user.id
    )
    cur.execute(sql)
    answers = cur.fetchall()
    info = ''
    for answer in answers:
        info += f'–Ω–∏—à–∞ –∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞: {answer[0]}; –ø—Ä–æ–±–ª–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–∞: {answer[1]}'

    response = generate_response(
        f'–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {info}. –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ—Å—Ç–∞–≤—å –Ω–µ–±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É. –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —É –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –µ—Å—Ç—å —Å–∏–ª—å–Ω—ã–π —ç—Ñ–∏—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Ç—É –ø—Ä–æ–ª–±–µ–º—É, –æ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–ø–∏—Å–∞–ª –∫–ª–∏–µ–Ω—Ç. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤ –ø—Ä–æ —ç—Ñ–∏—Ä.')

    text = response
    bot.send_message(message.chat.id, text=text)
    bot.send_video(message.chat.id, video=open('video.MP4', 'rb'), supports_streaming=True)
    text = """–í–Ω—É—Ç—Ä–∏ —ç—Ñ–∏—Ä–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è —Ä–∞–∑–±–∏—Ä–∞–µ—Ç:\n
- –ö–∞–∫ —Å–µ–π—á–∞—Å –ª—é–¥–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Å—å —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∏–Ω—Ñ–æ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É—Å–ª—É–≥?
- –ü–æ—á–µ–º—É —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ —É–∂–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Ä–æ–ª–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è –∫—É–ø–∏—Ç—å?
- –ö–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ö–æ–ª–æ–¥–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–ª–∞—Å—å –Ω–∞ —Ç–≤–æ–π –±–ª–æ–≥?
- –ö–∞–∫ –Ω–∞ –º–∏–∫—Ä–æ–±–ª–æ–≥–µ —Å –æ—Ö–≤–∞—Ç–∞–º–∏ –æ—Ç 200 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–∞ + 1 –º–ª–Ω —Ä—É–±. –≤ –º–µ—Å—è—Ü.\n
–ß—Ç–æ —Å–∫–∞–∂–µ—à—å? –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"""
    yes_button = types.InlineKeyboardButton('–î–∞', callback_data='first_yes')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(yes_button)
    bot.send_message(message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'first_yes')
def offer_step(call: types.CallbackQuery):
    text = """–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞–ø–∏—Å—å —ç—Ç–æ–≥–æ —ç—Ñ–∏—Ä–∞ –≤—Å–µ–≥–æ –∑–∞ 399 —Ä—É–±.\n
–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –ê–Ω–∞—Å—Ç–∞—Å–∏—è —Å–¥–µ–ª–∞–ª–∞ –ø—Ä–æ–¥–∞–∂ –Ω–∞ 0,5 –º–ª–Ω —Ä—É–±.\n
–ó–∞–±–∏—Ä–∞–µ—à—å?"""
    yes_button = types.InlineKeyboardButton('–î–∞', callback_data='second_yes')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(yes_button)
    bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'second_yes')
def offer_step(call: types.CallbackQuery):
    text = """–ù–∞ 48 —á–∞—Å–æ–≤ —ç—Ñ–∏—Ä –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –∑–∞ 399 —Ä—É–±.\n
–ù–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 999 —Ä—É–±.\n
–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç?"""
    first_button = types.InlineKeyboardButton('399', callback_data='first_price')
    second_button = types.InlineKeyboardButton('999', callback_data='second_price')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(first_button)
    keyboard.add(second_button)
    bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'first_price')
def offer_step_cheap(call: types.CallbackQuery):
    send_invoice(call.message, '–ö—É—Ä—Å', 39900)


@bot.callback_query_handler(func=lambda c: c.data == 'second_price')
def offer_step_expensive(call: types.CallbackQuery):
    send_invoice(call.message, '–ö—É—Ä—Å', 99900)


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True,
        error_message='–í–æ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...')


@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    delete = False
    if message.successful_payment.total_amount / 100 == 399:
        text = '–°—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤'
        delete = True
    else:
        text = '–û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞'
    message = bot.send_message(message.chat.id, text=text)
    if delete:
        time.sleep(172800)
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


def generate_response(message):
    # get answer from chatgpt
    answer = gpt.answer_index(
        system,
        message,
        marketing_tg_post_index
    )
    return answer


bot.polling()
