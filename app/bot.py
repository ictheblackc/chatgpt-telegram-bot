import sqlite3
import time
from telebot import TeleBot
from telebot import types
from telebot.types import LabeledPrice
from config import *
from database import database as db
from chatgpt import chatgpt as gpt
from app.message import message as msg


gpt.set_key()
search_indexes = gpt.load_search_indexes(DOCUMENT+'&rtpof=true&sd=true')
bot = TeleBot(BOT_TOKEN)
db.create_db()


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    is_bot = message.from_user.is_bot
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    language_code = message.from_user.language_code
    is_premium = message.from_user.is_premium

    db.insert_user(user_id, is_bot, first_name, last_name, username, language_code, is_premium)

    text = msg.welcome
    start_button = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å', callback_data='start')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(start_button)
    bot.send_message(message.chat.id, text, reply_markup=keyboard)


def wait(message):
    text = """–°–µ–∫—É–Ω–¥—É, –¥—É–º–∞—é, –∫–∞–∫ –≤–∞–º –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å ü§î"""
    message = bot.send_message(message.chat.id, text=text)
    bot.register_next_step_handler(message, guide_step)


def send_invoice(message, label, amount):
    bot.send_message(message.chat.id,
                     "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π"
                     "\n\n–ü—Ä–∏–º–µ—Ä —Å—á–µ—Ç–∞:", parse_mode='Markdown')
    bot.send_invoice(
        chat_id=message.chat.id,
        title='–û–Ω–ª–∞–π–Ω-—É—Ä–æ–∫',
        description='–û–Ω–ª–∞–π–Ω-—É—Ä–æ–∫ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–∞ 1 —á–∞—Å. –í–Ω—É—Ç—Ä–∏ –æ–±—ä—è—Å–Ω—è–µ—Ç—Å—è —Å—Ö–µ–º–∞ –ø—Ä–æ–¥–∞–∂, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã–≤–∞—Ç—å 6 –∏–∑ 10 —Ö–æ–ª–æ–¥–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —á–µ–∫–æ–º.',
        invoice_payload='invoice_payload',
        provider_token=PROVIDER_TOKEN,
        currency='RUB',
        prices=[LabeledPrice(label=label, amount=amount)]
    )


@bot.callback_query_handler(func=lambda c: c.data == 'start')
def start_callback(call: types.CallbackQuery):
    text = """–û—Ç–ª–∏—á–Ω–æ!\n
–Ø –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –æ—Ç–¥–∞—Ç—å –≥–∞–π–¥ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ—Ä—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –µ–≥–æ –Ω–∞ 1-3 –º–ª–Ω —Ä—É–±. –Ω–∞ —Ö–æ–ª–æ–¥–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é"\n
–ù–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—à—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞. –•–æ—Ä–æ—à–æ?"""
    start_button = types.InlineKeyboardButton('–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', callback_data='ok')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(start_button)
    bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'ok')
def ok_callback(call: types.CallbackQuery):
    text = msg.question_1
    message = bot.send_message(chat_id=call.message.chat.id, text=text)
    bot.register_next_step_handler(message, sales_step)


def sales_step(message):
    db.update_user(message.from_user.id, 'answer_1', message.text)
    text = msg.question_2
    message = bot.send_message(message.chat.id, text=text)
    bot.register_next_step_handler(message, income_step)


def income_step(message):
    db.update_user(message.from_user.id, 'answer_2', message.text)
    text = msg.question_3
    message = bot.send_message(message.chat.id, text=text)
    bot.register_next_step_handler(message, guide_step)


def guide_step(message):
    db.update_user(message.from_user.id, 'answer_3', message.text)
    wait(message)
    user = db.get_user(message.from_user.id)
    info = ''
    info += '–ù–∏—à–∞ –∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞: {}; '.format(user[7])
    info += '–≤ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ–¥–∞–∂ –≤ –º–µ—Å—è—Ü —Å –±–ª–æ–≥–∞: {}; '.format(user[8])
    info += '—Ö–æ—Ç–µ–ª –±—ã –≤—ã–π—Ç–∏ –Ω–∞ –¥–æ—Ö–æ–¥: {}.'.format(user[9])

    response = generate_response(
        f'–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {info}. –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ—Å—Ç–∞–≤—å –Ω–µ–±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É. –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –Ω–∏—à–∞ –∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –î–∞–ª—å—à–µ –ø—Ä–µ–¥–ª–æ–∂–∏ –µ–º—É –∑–∞–±—Ä–∞—Ç—å –≥–∞–π–¥. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —ç—Ç–æ—Ç –≥–∞–π–¥ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∫–∞ –æ—Ç—Å—Ç—Ä–æ–∏—Ç—å—Å—è –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—å –∑–∞–º–µ—Ç–Ω—ã–º –Ω–∞ —Ä—ã–Ω–∫–µ.')

    text = response
    download_button = types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –≥–∞–π–¥', callback_data='download')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(download_button)
    bot.send_message(message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'download')
def send_guide(call: types.CallbackQuery):
    file = open("../kivy.pdf", "rb")
    bot.send_document(chat_id=call.message.chat.id, document=file)
    text = """–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –Ω–µ —É—Ö–æ–¥–∏—Ç–µ. –£ –º–µ–Ω—è –µ—Å—Ç—å –µ—â–µ –æ–¥–Ω–∞ —Å—Ö–µ–º–∞ –ø—Ä–æ–¥–∞–∂, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –¥–µ–ª–∞—Ç—å 6 –∏–∑ 10 –ø—Ä–æ–¥–∞–∂ –Ω–∞ —Ö–æ–ª–æ–¥–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é (—Ç–æ –µ—Å—Ç—å –Ω–∞ —Ç–µ—Ö, –∫—Ç–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –µ–µ –±–ª–æ–≥)\n
–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"""
    interesting_button = types.InlineKeyboardButton('–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', callback_data='interesting')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(interesting_button)
    bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'interesting')
def problem_step(call: types.CallbackQuery):
    text = """–û—Ç–ª–∏—á–Ω–æ!\n
–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å –º–µ—à–∞–µ—Ç, –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, –≤–¥–≤–æ–µ-–≤—Ç—Ä–æ–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏?"""
    message = bot.send_message(chat_id=call.message.chat.id, text=text)
    bot.register_next_step_handler(message, send_testimonial)


def send_testimonial(message):
    conn = sqlite3.connect('../database.sqlite3')
    cur = conn.cursor()
    sql = """
    UPDATE users
    SET answer_4 = '{}'
    WHERE id = '{}';
    """.format(
        message.text,
        message.from_user.id
    )
    cur.execute(sql)
    conn.commit()

    wait(message)

    sql = """
    SELECT answer_1, answer_4
    FROM users
    WHERE id = '{}';
    """.format(
        message.from_user.id
    )
    cur.execute(sql)
    answers = cur.fetchall()
    info = ''
    for answer in answers:
        info += f'–Ω–∏—à–∞ –∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞: {answer[0]}; –ø—Ä–æ–±–ª–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–∞: {answer[1]}'

    response = generate_response(
        f'–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {info}. –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ—Å—Ç–∞–≤—å –Ω–µ–±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É. –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —É –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –µ—Å—Ç—å —Å–∏–ª—å–Ω—ã–π —ç—Ñ–∏—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Ç—É –ø—Ä–æ–ª–±–µ–º—É, –æ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–ø–∏—Å–∞–ª –∫–ª–∏–µ–Ω—Ç. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤ –ø—Ä–æ —ç—Ñ–∏—Ä.')

    text = response
    bot.send_message(message.chat.id, text=text)
    bot.send_video(message.chat.id, video=open('../video.MP4', 'rb'), supports_streaming=True)
    text = """–í–Ω—É—Ç—Ä–∏ —ç—Ñ–∏—Ä–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è —Ä–∞–∑–±–∏—Ä–∞–µ—Ç:\n
- –ö–∞–∫ —Å–µ–π—á–∞—Å –ª—é–¥–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Å—å —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∏–Ω—Ñ–æ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É—Å–ª—É–≥?
- –ü–æ—á–µ–º—É —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ —É–∂–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Ä–æ–ª–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è –∫—É–ø–∏—Ç—å?
- –ö–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ö–æ–ª–æ–¥–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–ª–∞—Å—å –Ω–∞ —Ç–≤–æ–π –±–ª–æ–≥?
- –ö–∞–∫ –Ω–∞ –º–∏–∫—Ä–æ–±–ª–æ–≥–µ —Å –æ—Ö–≤–∞—Ç–∞–º–∏ –æ—Ç 200 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–∞ + 1 –º–ª–Ω —Ä—É–±. –≤ –º–µ—Å—è—Ü.\n
–ß—Ç–æ —Å–∫–∞–∂–µ—à—å? –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"""
    yes_button = types.InlineKeyboardButton('–î–∞', callback_data='first_yes')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(yes_button)
    bot.send_message(message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'first_yes')
def offer_step_1(call: types.CallbackQuery):
    text = msg.offer
    yes_button = types.InlineKeyboardButton('–î–∞', callback_data='second_yes')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(yes_button)
    bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'second_yes')
def offer_step_2(call: types.CallbackQuery):
    text = """–ù–∞ 48 —á–∞—Å–æ–≤ —ç—Ñ–∏—Ä –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –∑–∞ 399 —Ä—É–±.\n
–ù–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 999 —Ä—É–±.\n
–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç?"""
    first_button = types.InlineKeyboardButton('399', callback_data='first_price')
    second_button = types.InlineKeyboardButton('999', callback_data='second_price')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(first_button)
    keyboard.add(second_button)
    bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'first_price')
def offer_step_cheap(call: types.CallbackQuery):
    send_invoice(call.message, '–û–Ω–ª–∞–π–Ω-—É—Ä–æ–∫', 39900)


@bot.callback_query_handler(func=lambda c: c.data == 'second_price')
def offer_step_expensive(call: types.CallbackQuery):
    send_invoice(call.message, '–û–Ω–ª–∞–π–Ω-—É—Ä–æ–∫', 99900)


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True,
        error_message=msg.checkout_error)


@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    delete = False
    if message.successful_payment.total_amount / 100 == 399:
        text = FIRST_LINK
        delete = True
    else:
        text = SECOND_LINK
    message = bot.send_message(message.chat.id, text=text)
    if delete:
        time.sleep(DELETE_LINK_TIME)
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


def generate_response(message):
    # get answer from chatgpt
    answer = gpt.answer_index(
        SYSTEM,
        message,
        search_indexes,
    )
    return answer
